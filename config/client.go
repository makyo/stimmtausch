package config

import (
	"fmt"
)

// Client holds information regarding how Stimmtausch runs.
type Client struct {
	Syslog  Syslog
	Profile Profile
	Logging Logging
	UI      UI
}

// Syslog holds nformation regarding the logging generated by the program (as
// opposed to the connections).
type Syslog struct {

	// Whether or not to show the system log in a pane in the UI.
	ShowSyslog bool `yaml:"show_syslog" toml:"log_level"`

	// Lowest log level to show by default. Options are:
	// TRACE, DEBUG, INFO (default), WARNING, ERROR, CRITICAL
	LogLevel string `yaml:"log_level" toml:"log_level"`
}

// Profile holds information regarding profiling resources in development.
type Profile struct {

	// Whether or not to profile memory usage.
	Mem bool

	// Whether or not to profile CPU usage.
	CPU bool `yaml:"cpu" toml:"cpu"`
}

// Logging holds information regarding logging from connections.
type Logging struct {

	// The time format to use when logging times.
	// TODO validate
	TimeString string `yaml:"time_string" toml:"time_string"`

	// Whether or not to log timestamps.
	LogTimestamps bool `yaml:"log_timestamps" toml"log_timestamps"`

	// Whether or not to keep logs of the connection after disconnect.
	LogWorld bool `yaml:"log_world" toml:"log_world"`
}

// UI holds information regarding the user interface.
type UI struct {

	// How many lines of scrollback (data received) to keep in memory.
	Scrollback int

	// How many lines of history (data sent) to keep in memory.
	History int

	// Whether or not to use a unified history buffer for all
	// connections, or one per.
	// TODO
	UnifiedHistoryBuffer bool `yaml:"unified_history_buffer" toml:"unified_history_buffer"`

	// Whether or not to use Vim-style key bindings
	// TODO
	VimKeybindings bool `yaml:"vim_keybindings" toml:"vim_keybindings"`

	// Indentation of wrapped lines.
	IndentFirst      int `yaml:"indent_first" toml:"indent_first"`
	IndentSubsequent int `yaml:"indent_subsequent" toml:"indent_subsequent"`

	// Whether or not to support mouse events
	// TODO
	Mouse bool

	// Colors in the UI
	Colors Colors
}

// Colors in the UI
type Colors struct {
	Theme         string
	Themes        []Theme
	ComputedTheme Theme
}

func (c Colors) GetTheme() (Theme, error) {
	for _, theme := range c.Themes {
		if theme.Name == c.Theme {
			return theme, nil
		}
	}
	return Theme{}, fmt.Errorf("theme %s not found", c.Theme)
}

type Theme struct {
	Name                        string
	Inherits                    string
	PrimitiveBackgroundColor    string
	ContrastBackgroundColor     string `yaml:"contrast_background" toml:"contrast_background"`
	MoreContrastBackgroundColor string `yaml:"more_contrast_background" toml:"more_contrast_background"`
	BorderColor                 string
	TitleColor                  string
	GraphicsColor               string
	PrimaryTextColor            string `yaml:"primary_text" toml:"primary_text"`
	SecondaryTextColor          string `yaml:"secondary_text" toml:"secondary_text"`
	TertiaryTextColor           string `yaml:"tertiary_text" toml:"tertiary_text"`
	InverseTextColor            string `yaml:"inverse_text" toml:"inverse_text"`
	ContrastSecondaryTextColor  string `yaml:"contrast_secondary_text" toml:"contrast_secondary_text"`
	// The colors for the input buffer titles in ansigo specifications.
	SendTitle struct {
		Active             string
		ActiveMore         string `yaml:"active_more" toml:"active_more"` // TODO
		Inactive           string
		InactiveMore       string `yaml:"inactive_more" toml:"inactive_more"` // TODO
		Disconnected       string
		DisconnectedMore   string `yaml:"disconnected_more" toml:"disconnected_more"`     // TODO
		DisconnectedActive string `yaml:"disconnected_active" toml:"disconnected_active"` // TODO
	} `yaml:"send_title" toml:"send_title"`
}
